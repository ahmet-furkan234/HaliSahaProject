openapi: 3.0.3
info:
  title: HaliSahaProject API
  version: 1.0.0
  description: OpenAPI specification for Users and Roles APIs
servers:
  - url: http://localhost:3000
tags:
  - name: Users
  - name: Roles
paths:
  /users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        '200':
          description: Users fetched successfully or Not Found Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUsersResponse'
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUserResponse'
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: User ID (mongo ObjectId)
    get:
      tags: [Users]
      summary: Get user by id
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUserResponse'
        '404':
          description: User not found
    put:
      tags: [Users]
      summary: Update user by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUserResponse'
        '404':
          description: User not found
    delete:
      tags: [Users]
      summary: Delete user by id
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericNullResponse'
        '404':
          description: User not found
  /roles/{roleId}/users:
    parameters:
      - in: path
        name: roleId
        schema:
          type: integer
        required: true
        description: Numeric role id
    get:
      tags: [Users]
      summary: Get users by role id
      responses:
        '200':
          description: Users by role fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUsersResponse'
  /roles:
    get:
      tags: [Roles]
      summary: Get all roles
      responses:
        '200':
          description: Roles fetched successfully or Not Found Roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRolesResponse'
    post:
      tags: [Roles]
      summary: Create a role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRoleResponse'
  /roles/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Role ID (mongo ObjectId)
    get:
      tags: [Roles]
      summary: Get role by id
      responses:
        '200':
          description: Role fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRoleResponse'
        '404':
          description: Role not found
    put:
      tags: [Roles]
      summary: Update role by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDto'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericRoleResponse'
        '404':
          description: Role not found
    delete:
      tags: [Roles]
      summary: Delete role by id
      responses:
        '200':
          description: Role deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericNullResponse'
        '404':
          description: Role not found
  /users/{id}/roles/{roleId}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: User ID (mongo ObjectId)
      - in: path
        name: roleId
        schema:
          type: integer
        required: true
        description: Numeric role id
    post:
      tags: [Roles]
      summary: Assign role to user
      responses:
        '200':
          description: Role assigned to user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericNullResponse'
    delete:
      tags: [Roles]
      summary: Unassign role from user
      responses:
        '200':
          description: Role unassigned from user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericNullResponse'

components:
  schemas:
    CreateUserDto:
      type: object
      required: [firstName, lastName, email, password]
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 30
        lastName:
          type: string
          minLength: 2
          maxLength: 30
        email:
          type: string
          format: email
        password:
          type: string
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 30
        lastName:
          type: string
          minLength: 2
          maxLength: 30
        email:
          type: string
          format: email
        password:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        roleId:
          type: integer
          nullable: true
    CreateRoleDto:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 30
    UpdateRoleDto:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 30
    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    GenericResponseBase:
      type: object
      properties:
        message:
          type: string
        result: {}
        warning:
          type: string
          nullable: true
        info:
          type: string
          nullable: true
    GenericUserResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponseBase'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/User'
    GenericUsersResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponseBase'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/User'
    GenericRoleResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponseBase'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Role'
    GenericRolesResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponseBase'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Role'
    GenericNullResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponseBase'
        - type: object
          properties:
            result:
              type: 'null'


